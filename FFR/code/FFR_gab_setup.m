function jobs = FFR_gab_setup(sid, EXPID)
%% DESCIRPTION
%
%   General setup file for FFR-Clinard study.
%
% INPUT:
%   
%   sid:    char array, each row is a subject ID
%   EXPID:  
%
% OUTPUT:
%
%   jobs:   job structure for use with GAB
%
% Bishop, Chris Miller Lab 2010

studyDir=['C:\Users\cwbishop\Documents\GitHub\Projects\FFR\' EXPID filesep];

jobs={};
for s=1:size(sid,1)
    
    SID=deblank(sid(s,:));
    subDir=fullfile(studyDir,SID);
    
%% BUILD DEFAULT JOBS

%% PACKAGE DATA
%
%   Package data into tgz file format??

%% MOVE/COPY Files
%
%   I don't care for the *.tgz approach we used previously, so it would be
%   great to have a function that allows me to 
    
%% PREPROCESSING (preproc)
%
%   This job does some basic preprocessing including importing data
%   into EEGLAB, merging files (if necessary), high-pass filtering the
%   data, loading electrode locations, etc. 
%
%   Removed job dependencies for now, will need to add them back in once I
%   decide on a data format that's easy to use. 
    preproc=gab_emptyjob;
    preproc.jobName='preproc';
    preproc.jobDir=fullfile(subDir, 'jobs');
    preproc.parent={};
    
    % Load environmental variables
    preproc.task{end+1}=struct(...
        'func',@gab_task_envvars,...
        'args','');
    
    % Read File
    preproc.task{end+1}=struct(...
        'func',@gab_task_eeglab_loadcnt,...
        'args',struct(...
            'files',{{fullfile(subDir, 'eeg', [SID 'fullfile(subDir, 'eeg', [SID '-MSPE.bdf'])}},...
            'ref',1:64,... % Reference all electroes to all but EOG electrodes
            'chans',1:64)); % Load 64 + 4 EOG

    % Add Channel Locations
    preproc.task{end+1}=struct(...
        'func',@gab_task_eeg_chanlocs,...
        'args',struct('file','/home/millerlab/elpfiles/BioSemi_64_10-10.elp'));
    
    % Resample
    preproc.task{end+1}=struct(...
        'func',@gab_task_eeg_resample,...
        'args',struct('freq',512)); % changed to match Backer's sampling rate

    % High pass filter
    preproc.task{end+1}=struct(...
        'func',@gab_task_erplab_basicfilter,...
        'args',struct(...
            'channels', 1:64, ...
            'locutoff', 0.5, ...
            'hicutoff', 0, ...
            'filterorder', 2, ...
            'typef', 'butter', ...
            'remove_dc', 1, ...
            'boundary', 32766)); % biosemi default boundary event is 32766
    
    % Save Preprocessing job
    preproc.task{end+1}=struct(...
        'func',@gab_task_eeglab_saveset,...
        'args',struct(...
            'filepath', fullfile(subDir, 'analysis'), ...
            'filename', [SID '-Preproc.set']));
  
%% INDEPENDENT COMPONENT ANALYSIS (ICA)
%   
%   This job employs EEGLAB's 'runica' function to identify noise
%   components.  After completion, these components must be manually
%   inspected and the data remixed with whatever combination of components
%   the user wants. These data files will be used for subsequent ERP
%   analyses. 
    ICA=gab_emptyjob;
    ICA.jobName='ICA';
    ICA.jobDir=fullfile(subDir, 'jobs');
%     ICA.parent={fullfile(preproc.jobDir,[preproc.jobName '.mat'])};
    ICA.parent='';
     
    % Load environmental variables
    ICA.task{end+1}=struct(...
        'func',@gab_task_envvars,...
        'args','');

    % Load preprocessed data       
    ICA.task{end+1}=struct(...
        'func',@gab_task_eeglab_loadset,...
        'args',struct(...
            'filepath', fullfile(subDir, 'analysis'), ...
            'filename', [SID '-Preproc.set']));
    % Run ICA
    ICA.task{end+1}=struct(...
        'func', @gab_task_eeglab_runica, ...
        'args', struct(...
        'icatype', 'runica')); % tried binica but didn't have much luck. seg fault. not sure what's up
    
    % Save data + ICs
    ICA.task{end+1}=struct(...
        'func',@gab_task_eeglab_saveset,...
        'args',struct(...
            'filepath', fullfile(subDir, 'analysis'), ...
            'filename', [SID '-Preproc (ICA).set']));
        
%% EVENT RELATED POTENTIAL (ERP) Jobs
%   
%   Each of these jobs ultimately creates a *.set file with the epoched
%   data for future reference and an ERP data structure (ERPLAB) based on
%   these datasets.  
    
%% ERP + EYEBLINK (EB)
%
%   ERP job based on the Eye-Blink (EB) dataset that was reconstructed with
%   *only* the Eye Blink component following ICA.
    erpEB=gab_emptyjob;
    erpEB.jobName='erpEB';
    erpEB.jobDir=fullfile(subDir, 'jobs');
    erpEB.parent='';
%     erpEB.parent={fullfile(preproc.jobDir,[ICA.jobName '.mat'])};
    
    % Load environmental variables
    erpEB.task{end+1}=struct(...
        'func',@gab_task_envvars,...
        'args','');
    
    % Load preprocessing file.
    erpEB.task{end+1}=struct(...
        'func',@gab_task_eeglab_loadset,...
        'args',struct(...
            'filepath', fullfile(subDir, 'analysis'), ...
            'filename', [SID '-Preproc (ICA)+EB.set']));
        
        erpEB.task{end+1}=struct(...
        'func',@MSPE_ERPLAB,...
        'args',struct(...
            'BINLIST', '/home/cwbishop/projects/MSPE/code/BIN01.txt', ...
            'Epoch', [-800 800], ...
            'Baseline', [-100 0], ...
            'threshold', [-30 30], ...
            'artTwin', [-100 100], ... % -100 to 100 msec check for eyeblinks. 
            'typef', 'butter', ...
            'FilterBandPass', [0 40], ... % changed low cutoff.
            'FilterOrder', 4, ...
            'ERPFilename', fullfile(studyDir, SID, 'analysis', [SID '_ERP (Eye-Blink)']), ...
            'ERPName', [SID '_ERP (Eye-Blink)'], ...
            'BINOPS', fullfile(studyDir, '..', 'code', 'BINOPS02.txt'),...
            'boundary', 32766,...
            'chanArray', 1:64, ...
            'artcrite', 1, ...
            'iswavg', 0, ...
            'stdev', 1));

        % Save Filtered EEG Dataset    
    erpEB.task{end+1}=struct(...
        'func',@gab_task_eeglab_saveset,...
        'args',struct(...
            'filepath', fullfile(subDir, 'analysis'), ...
            'filename', [SID '-MSPE_ERP (Eye-Blink).set']));

%% NO-EYEBLINK COMPONENT
%
%   ERP analysis done with data with only the eye-blink component removed.
    erpNEB=gab_emptyjob;
    erpNEB.jobName='erpNEB';
    erpNEB.jobDir=fullfile(subDir, 'jobs');
    erpNEB.parent='';
%     erpNEB.parent={fullfile(preproc.jobDir,[ICA.jobName '.mat'])};
    
    % Load environmental variables
    erpNEB.task{end+1}=struct(...
        'func',@gab_task_envvars,...
        'args','');
    
    % Load preprocessing file.
    erpNEB.task{end+1}=struct(...
        'func',@gab_task_eeglab_loadset,...
        'args',struct(...
            'filepath', fullfile(subDir, 'analysis'), ...
            'filename', [SID '-Preproc (ICA)-NEB.set']));
        
    % EPOCH data and average to create ERPs.
    erpNEB.task{end+1}=struct(...
        'func',@MSPE_ERPLAB,...
        'args',struct(...
            'BINLIST', '/home/cwbishop/projects/MSPE/code/BIN01.txt', ...
            'Epoch', [-800 800], ...
            'Baseline', [-100 0], ...
            'threshold', [-80 80], ... % 80 uV cutoff should be find here.
            'artTwin', [-100 500], ... % only reject if it's in the analysis window
            'typef', 'butter', ...
            'FilterBandPass', [0 40], ... % changed low cutoff.
            'FilterOrder', 4, ...
            'ERPFilename', fullfile(studyDir, SID, 'analysis', [SID '_ERP (No-Eye-Blink)']), ...
            'ERPName', [SID '_ERP (No-Eye-Blink)'], ...
            'BINOPS', fullfile(studyDir, '..', 'code', 'BINOPS02.txt'),...
            'boundary', 32766, ...
            'chanArray', 1:64,...
            'artcrite', 1, ...
            'iswavg', 0, ...
            'stdev', 1));

    % Save Filtered EEG Dataset
    erpNEB.task{end+1}=struct(...
        'func',@gab_task_eeglab_saveset,...
        'args',struct(...
            'filepath', fullfile(subDir, 'analysis'), ...
            'filename', [SID '-MSPE_ERP (No-Eye-Blink).set']));
%% NO-EYEBLINK; REB ERP DATA
%
%   ERP analysis done with data with only the eye-blink component removed.
%   Additional artifact rejection precautions taken to toss out trials when
%   subjects blink during stimulus presentation. 
    erpNEB_REB=gab_emptyjob;
    erpNEB_REB.jobName='erpNEB_REB';
    erpNEB_REB.jobDir=fullfile(subDir, 'jobs');
    erpNEB_REB.parent='';
%     erpNEB.parent={fullfile(preproc.jobDir,[ICA.jobName '.mat'])};
    
    % Load environmental variables
    erpNEB_REB.task{end+1}=struct(...
        'func',@gab_task_envvars,...
        'args','');
    
    % Load preprocessing file.
    erpNEB_REB.task{end+1}=struct(...
        'func',@gab_task_eeglab_loadset,...
        'args',struct(...
            'filepath', fullfile(subDir, 'analysis'), ...
            'filename', [SID '-Preproc (ICA)-NEB.set']));
        
    % EPOCH data and average to create ERPs.
    erpNEB_REB.task{end+1}=struct(...
        'func',@MSPE_ERPLAB,...
        'args',struct(...
            'BINLIST', '/home/cwbishop/projects/MSPE/code/BIN01.txt', ...
            'Epoch', [-800 800], ...
            'Baseline', [-100 0], ...
            'threshold', [-80 80], ... % 80 uV cutoff should be find here.
            'artTwin', [-100 500], ... % only reject if it's in the analysis window
            'typef', 'butter', ...
            'FilterBandPass', [0 40], ... % changed low cutoff.
            'FilterOrder', 4, ...
            'ERPFilename', fullfile(studyDir, SID, 'analysis', [SID '_ERP (No-Eye-Blink; REB)']), ...
            'ERPName', [SID '_ERP (No-Eye-Blink; REB)'], ...
            'BINOPS', fullfile(studyDir, '..', 'code', 'BINOPS02.txt'),...
            'boundary', 32766, ...
            'chanArray', 1:64,...
            'EEGREJ_filepath', fullfile(subDir, 'analysis'), ...
            'EEGREJ_filename', [SID '-MSPE_ERP (Eye-Blink).set'], ...
            'artcrite', 1, ...
            'iswavg', 0, ...
            'stdev', 1));

    % Save Filtered EEG Dataset
    erpNEB_REB.task{end+1}=struct(...
        'func',@gab_task_eeglab_saveset,...
        'args',struct(...
            'filepath', fullfile(subDir, 'analysis'), ...
            'filename', [SID '-MSPE_ERP (No-Eye-Blink; REB).set']));
%% CLEAN ERP DATA
%   Eye-Blinks and muscle artifacts have been removed. Horizontal
%   eye-movements are not explicitly removed. 
%
%   Notice that I do not take the extra precautionary step here to remove
%   trials flagged in the erpEB job here.  That is reserved for the
%   erpCLEAN-REB job.
    erpCLEAN=gab_emptyjob;
    erpCLEAN.jobName='erpCLEAN';
    erpCLEAN.jobDir=fullfile(subDir, 'jobs');
    erpCLEAN.parent='';
%     erpCLEAN.parent={fullfile(preproc.jobDir,[ICA.jobName '.mat'])};
    
    % Load environmental variables
    erpCLEAN.task{end+1}=struct(...
        'func',@gab_task_envvars,...
        'args','');
    
    % Load preprocessing file.
    erpCLEAN.task{end+1}=struct(...
        'func',@gab_task_eeglab_loadset,...
        'args',struct(...
            'filepath', fullfile(subDir, 'analysis'), ...
            'filename', [SID '-Preproc (ICA)-CLEAN.set']));
        
    % EPOCH data and average to create ERPs.
    erpCLEAN.task{end+1}=struct(...
        'func',@MSPE_ERPLAB,...
        'args',struct(...
            'BINLIST', '/home/cwbishop/projects/MSPE/code/BIN01.txt', ...
            'Epoch', [-800 800], ...
            'Baseline', [-100 0], ...
            'threshold', [-80 80], ...
            'artTwin', [-100 500], ... 
            'typef', 'butter', ...
            'FilterBandPass', [0 40], ... % changed low cutoff.
            'FilterOrder', 4, ...
            'ERPFilename', fullfile(studyDir, SID, 'analysis', [SID '_ERP (CLEAN)']), ...
            'ERPName', [SID '_ERP (CLEAN)'], ...
            'BINOPS', fullfile(studyDir, '..', 'code', 'BINOPS02.txt'),...
            'boundary', 32766, ...
            'chanArray', 1:64, ...
            'artcrite', 1, ...
            'iswavg', 0, ...
            'stdev', 1));

    % Save Filtered EEG Dataset
    erpCLEAN.task{end+1}=struct(...
        'func',@gab_task_eeglab_saveset,...
        'args',struct(...
            'filepath', fullfile(subDir, 'analysis'), ...
            'filename', [SID '-MSPE_ERP (CLEAN).set']));    
        
%% CLEAN; REB ERP DATA
%   Eye-Blinks and muscle artifacts have been removed. Horizontal
%   eye-movements are not explicitly removed. 
%
%   Notice that I do not take the extra precautionary step here to remove
%   trials flagged in the erpEB job here.  That is reserved for the
%   erpCLEAN_REB job.
    erpCLEAN_REB=gab_emptyjob;
    erpCLEAN_REB.jobName='erpCLEAN_REB';
    erpCLEAN_REB.jobDir=fullfile(subDir, 'jobs');
    erpCLEAN_REB.parent='';
%     erpCLEAN_REB.parent={fullfile(preproc.jobDir,[erpEB.jobName '.mat'])};
    
    % Load environmental variables
    erpCLEAN_REB.task{end+1}=struct(...
        'func',@gab_task_envvars,...
        'args','');
    
    % Load preprocessing file.
    erpCLEAN_REB.task{end+1}=struct(...
        'func',@gab_task_eeglab_loadset,...
        'args',struct(...
            'filepath', fullfile(subDir, 'analysis'), ...
            'filename', [SID '-Preproc (ICA)-CLEAN.set']));
        
    % EPOCH data and average to create ERPs.
    erpCLEAN_REB.task{end+1}=struct(...
        'func',@MSPE_ERPLAB,...
        'args',struct(...
            'BINLIST', '/home/cwbishop/projects/MSPE/code/BIN01.txt', ...
            'Epoch', [-800 800], ...
            'Baseline', [-100 0], ...
            'threshold', [-80 80], ...
            'artTwin', [-100 500], ... 
            'typef', 'butter', ...
            'FilterBandPass', [0 40], ... % changed low cutoff.
            'FilterOrder', 4, ...
            'ERPFilename', fullfile(studyDir, SID, 'analysis', [SID '_ERP (CLEAN; REB)']), ...
            'ERPName', [SID '_ERP (CLEAN; REB)'], ...
            'BINOPS', fullfile(studyDir, '..', 'code', 'BINOPS02.txt'),...
            'boundary', 32766, ...
            'EEGREJ_filepath', fullfile(subDir, 'analysis'), ...
            'EEGREJ_filename', [SID '-MSPE_ERP (Eye-Blink).set'], ...
            'chanArray', 1:64, ...
            'artcrite', 1, ...
            'iswavg', 0, ...
            'stdev', 1));

    % Save Filtered EEG Dataset
    erpCLEAN_REB.task{end+1}=struct(...
        'func',@gab_task_eeglab_saveset,...
        'args',struct(...
            'filepath', fullfile(subDir, 'analysis'), ...
            'filename', [SID '-MSPE_ERP (CLEAN; REB).set']));

%% Spectrotemporal ERP job.  
%   These ERPs are constructed in an identical way to the CLEAN; REB job
%   above, except that the low pass filter is ommitted.  The hope is that
%   we can then spectrally decompose these data to do time frequency
%   analyses.  
%
%   Additionally flagged EyeBlinks are removed as well. 
    spectERP_CLEAN_REB=gab_emptyjob;
    spectERP_CLEAN_REB.jobName='spectERP_CLEAN_REB';
    spectERP_CLEAN_REB.jobDir=fullfile(subDir, 'jobs');
    spectERP_CLEAN_REB.parent='';
%     spectERP_CLEAN_REB.parent={fullfile(preproc.jobDir,[erpEB.jobName '.mat'])};
    
    % Load environmental variables
    spectERP_CLEAN_REB.task{end+1}=struct(...
        'func',@gab_task_envvars,...
        'args','');
    
    % Load preprocessing file.
    spectERP_CLEAN_REB.task{end+1}=struct(...
        'func',@gab_task_eeglab_loadset,...
        'args',struct(...
            'filepath', fullfile(subDir, 'analysis'), ...
            'filename', [SID '-Preproc (ICA)-CLEAN.set']));
        
    % EPOCH data and average to create ERPs.
    spectERP_CLEAN_REB.task{end+1}=struct(...
        'func',@MSPE_ERPLAB,...
        'args',struct(...
            'BINLIST', '/home/cwbishop/projects/MSPE/code/BIN01.txt', ...
            'Epoch', [-800 800], ...
            'Baseline', [-100 0], ...
            'threshold', [-80 80], ...
            'artTwin', [-100 500], ... 
            'typef', 'butter', ...
            'FilterBandPass', [0 0], ... % changed low cutoff.
            'FilterOrder', 4, ...
            'ERPFilename', fullfile(studyDir, SID, 'analysis', [SID '_SPECT (CLEAN; REB)']), ...
            'ERPName', [SID '_SPECT (CLEAN; REB)'], ...
            'BINOPS', fullfile(studyDir, '..', 'code', 'BINOPS02.txt'),...
            'boundary', 32766, ...
            'EEGREJ_filepath', fullfile(subDir, 'analysis'), ...
            'EEGREJ_filename', [SID '-MSPE_ERP (Eye-Blink).set'], ...
            'chanArray', 1:64, ...
            'artcrite', 1, ...
            'iswavg', 0, ...
            'stdev', 1));

    % Save Filtered EEG Dataset
    spectERP_CLEAN_REB.task{end+1}=struct(...
        'func',@gab_task_eeglab_saveset,...
        'args',struct(...
            'filepath', fullfile(subDir, 'analysis'), ...
            'filename', [SID '-MSPE_SPECT (CLEAN; REB).set']));

    %% TIME-FREQUENCY JOBS
    
    TIME_FREQUENCY=gab_emptyjob;
    TIME_FREQUENCY.jobName='TIME_FREQUENCY (CLEAN; REB)';
    TIME_FREQUENCY.jobDir=fullfile(subDir, 'jobs');
    TIME_FREQUENCY.parent='';
    
    % Load environmental variables
    TIME_FREQUENCY.task{end+1}=struct(...
        'func',@gab_task_envvars,...
        'args','');
    
    % Load data set
    TIME_FREQUENCY.task{end+1}=struct(...
        'func',@gab_task_eeglab_loadset,...
        'args',struct(...
            'filepath', spectERP_CLEAN_REB.task{end}.args.filepath, ...
            'filename', spectERP_CLEAN_REB.task{end}.args.filename));
    
    % Swap out EEGLAB rejection fields
    %   this is useful to ensure that the same trials are used for various
    %   analyses.  Here, I use the rejection fields for the erpCLEAN_REB
    %   ERP dataset. Thus, trials should be identical between the two.  
    TIME_FREQUENCY.task{end+1}=struct(...
        'func', @gab_task_eeglab_swapfields, ...
        'args', struct(...
            'filepath', erpCLEAN_REB.task{end}.args.filepath, ...
            'filename', erpCLEAN_REB.task{end}.args.filename, ...
            'fields', {{'reject'}}));

    TIME_FREQUENCY.task{end+1}=struct(...
        'func', @MSPE_spect, ...
        'args', struct(...
            'chanArray', 1:64, ...
            'binArray', 20, ...
            'filepath', fullfile(subDir, 'analysis'), ...
            'filename', [SID '-Ape(S)-TimeFreq (CLEAN; REB)'], ...
            'baseline', 0, ...
            'cycles', [2 0.5], ...
            'plotphase', 'off', ...
            'padratio', 2, ...
            'freqs', [4 80], ...
            'timesout', 600));
        
    TIME_FREQUENCY.task{end+1}=struct(...
        'func', @MSPE_spect, ...
        'args', struct(...
            'chanArray', 1:64, ...
            'binArray', 21, ...
            'filepath', fullfile(subDir, 'analysis'), ...
            'filename', [SID '-Ape(NS)-TimeFreq (CLEAN; REB)'], ...
            'baseline', 0, ...
            'cycles', [2 0.5], ...
            'plotphase', 'off', ...
            'padratio', 2, ...
            'freqs', [4 80], ...
            'timesout', 600));
    TIME_FREQUENCY.task{end+1}=struct(...
        'func', @MSPE_spect, ...
        'args', struct(...
            'chanArray', 1:64, ...
            'binArray', 23, ...
            'filepath', fullfile(subDir, 'analysis'), ...
            'filename', [SID '-ApeVlead(S)-TimeFreq (CLEAN; REB)'], ...
            'baseline', 0, ...
            'cycles', [2 0.5], ...
            'plotphase', 'off', ...
            'padratio', 2, ...
            'freqs', [4 80], ...
            'timesout', 600)); 
    TIME_FREQUENCY.task{end+1}=struct(...
        'func', @MSPE_spect, ...
        'args', struct(...
            'chanArray', 1:64, ...
            'binArray', 24, ...
            'filepath', fullfile(subDir, 'analysis'), ...
            'filename', [SID '-ApeVlead(NS)-TimeFreq (CLEAN; REB)'], ...
            'baseline', 0, ...
            'cycles', [2 0.5], ...
            'plotphase', 'off', ...
            'padratio', 2, ...
            'freqs', [4 80], ...
            'timesout', 600));  
        
%     TIME_FREQUENCY.task{end+1}=struct(...
%         'func', @MSPE_spect, ...
%         'args', struct(...
%             'chanArray', 1:64, ...
%             'binArray', 25, ...
%             'filepath', fullfile(subDir, 'analysis'), ...
%             'filename', [SID '-A-TimeFreq (CLEAN; REB)'], ...
%             'baseline', 0, ...
%             'cycles', [2 0.5], ...
%             'plotphase', 'off', ...
%             'padratio', 2, ...
%             'freqs', [4 80], ...
%             'timesout', 600));  
%         
%     TIME_FREQUENCY.task{end+1}=struct(...
%         'func', @MSPE_spect, ...
%         'args', struct(...
%             'chanArray', 1:64, ...
%             'binArray', 26, ...
%             'filepath', fullfile(subDir, 'analysis'), ...
%             'filename', [SID '-V-TimeFreq (CLEAN; REB)'], ...
%             'baseline', 0, ...
%             'cycles', [2 0.5], ...
%             'plotphase', 'off', ...
%             'padratio', 2, ...
%             'freqs', [4 80], ...
%             'timesout', 600));  
%     
%     TIME_FREQUENCY.task{end+1}=struct(...
%         'func', @MSPE_spect, ...
%         'args', struct(...
%             'chanArray', 1:64, ...
%             'binArray', 29, ...
%             'filepath', fullfile(subDir, 'analysis'), ...
%             'filename', [SID '-D-TimeFreq (CLEAN; REB)'], ...
%             'baseline', 0, ...
%             'cycles', [2 0.5], ...
%             'plotphase', 'off', ...
%             'padratio', 2, ...
%             'freqs', [4 80], ...
%             'timesout', 600)); 
%         
    %% Yeah, more spect temp stuff.
     %% More spect temp stuff.
    INDUCED=gab_emptyjob;
    INDUCED.jobName='INDUCED';
    INDUCED.jobDir=fullfile(subDir, 'jobs');
    INDUCED.parent='';
    
    % Load environmental variables
    INDUCED.task{end+1}=struct(...
        'func',@gab_task_envvars,...
        'args','');
    
    % Load data set
    INDUCED.task{end+1}=struct(...
        'func',@gab_task_eeglab_loadset,...
        'args',struct(...
            'filepath', fullfile(subDir, 'analysis'), ...
            'filename', [SID '-MSPE_ERP (CLEAN; REB).set']));

    INDUCED.task{end+1}=struct(...
        'func', @MSPE_invoked, ...
        'args', struct(...
            'chanArray', 1:64, ... 
            'binArray', [20], ...
            'filepath', fullfile(subDir, 'analysis'), ...
            'filename', [SID '-Ape(S)-INDUCED-MSPE_ERP (CLEAN; REB)'], ...
            'baseline', NaN, ...
            'cycles', [2 0.5], ...
            'plotphase', 'off', ...
            'padratio', 2, ...
            'freqs', [4 12], ...
            'timesout', 600));  
     INDUCED.task{end+1}=struct(...
        'func', @MSPE_invoked, ...
        'args', struct(...
            'chanArray', 1:64, ... 
            'binArray', [21], ...
            'filepath', fullfile(subDir, 'analysis'), ...
            'filename', [SID '-Ape(NS)-INDUCED-MSPE_ERP (CLEAN; REB)'], ...
            'baseline', NaN, ...
            'cycles', [2 0.5], ...
            'plotphase', 'off', ...
            'padratio', 2, ...
            'freqs', [4 12], ...
            'timesout', 600));  
     INDUCED.task{end+1}=struct(...
        'func', @MSPE_invoked, ...
        'args', struct(...
            'chanArray', 1:64, ... % just do Cz for now
            'binArray', [23], ...
            'filepath', fullfile(subDir, 'analysis'), ...
            'filename', [SID '-ApeVlead(S)-INDUCED-MSPE_ERP (CLEAN; REB)'], ...
            'baseline', NaN, ...
            'cycles', [2 0.5], ...
            'plotphase', 'off', ...
            'padratio', 2, ...
            'freqs', [4 12], ...
            'timesout', 600)); 
    INDUCED.task{end+1}=struct(...
        'func', @MSPE_invoked, ...
        'args', struct(...
            'chanArray', 1:64, ... % just do Cz for now
            'binArray', [24], ...
            'filepath', fullfile(subDir, 'analysis'), ...
            'filename', [SID '-ApeVlead(NS)-INDUCED-MSPE_ERP (CLEAN; REB)'], ...
            'baseline', NaN, ...
            'cycles', [2 0.5], ...
            'plotphase', 'off', ...
            'padratio', 2, ...
            'freqs', [4 12], ...
            'timesout', 600)); 
    INDUCED.task{end+1}=struct(...
        'func', @MSPE_invoked, ...
        'args', struct(...
            'chanArray', 1:64, ... % just do Cz for now
            'binArray', [25], ...
            'filepath', fullfile(subDir, 'analysis'), ...
            'filename', [SID '-A-INDUCED-MSPE_ERP (CLEAN; REB)'], ...
            'baseline', NaN, ...
            'cycles', [2 0.5], ...
            'plotphase', 'off', ...
            'padratio', 2, ...
            'freqs', [4 12], ...
            'timesout', 600)); 
    INDUCED.task{end+1}=struct(...
        'func', @MSPE_invoked, ...
        'args', struct(...
            'chanArray', 1:64, ... % just do Cz for now
            'binArray', [26], ...
            'filepath', fullfile(subDir, 'analysis'), ...
            'filename', [SID '-V-INDUCED-MSPE_ERP (CLEAN; REB)'], ...
            'baseline', NaN, ...
            'cycles', [2 0.5], ...
            'plotphase', 'off', ...
            'padratio', 2, ...
            'freqs', [4 12], ...
            'timesout', 600));
    INDUCED.task{end+1}=struct(...
        'func', @MSPE_invoked, ...
        'args', struct(...
            'chanArray', 1:64, ... % just do Cz for now
            'binArray', [29], ...
            'filepath', fullfile(subDir, 'analysis'), ...
            'filename', [SID '-D-INDUCED-MSPE_ERP (CLEAN; REB)'], ...
            'baseline', NaN, ...
            'cycles', [2 0.5], ...
            'plotphase', 'off', ...
            'padratio', 2, ...
            'freqs', [4 12], ...
            'timesout', 600));         
            
    %% TEMPLATE tasks
    MERGE=struct(...
        'func', @gab_task_eeg_mergeset, ...
        'args', '');
    
    %% INTERPolate task
    INTERPTASK=struct(...
        'func', @gab_task_eeglab_interp, ...
        'args', struct(...
            'badchans', [],...
            'method', '')); 
        
    %% Subject specific changes
    % Load subject specific BDF files and merge if necessary
    if strcmpi(EXPID, 'Exp07')==1
%         erpNEB.task{3}.args.BINOPS=fullfile(studyDir, '..', 'code', 'BINOPS02.txt');
%         spectNEB.task{3}.args.BINOPS=fullfile(studyDir, '..', 'code', 'BINOPS02.txt');
        switch SID            
            case {'s2615'}
                preproc.task{2}.args.file={fullfile(subDir, 'eeg', 's2615_MSPE_Exp07 (2.0 msec).bdf')};   
%                 spectNEB.task{2}.args.filename=[SID '-Preproc (ICA)-NEB-Muscle.set'];
            case {'s2616'}
                preproc.task{2}.args.file={fullfile(subDir, 'eeg', 's2616_MSPE_Exp07 (9.5 msec).bdf')};  
            case {'s2617'}
                display('s2617: Note High Frequency Noise in A1/A2'); 
                preproc.task{2}.args.file={fullfile(subDir, 'eeg', 's2617_MSPE_Exp07 (1.5 msec).bdf')};  
            case {'s2618'}
                display('s2618: Have you rejected data when fingers slipped?'); 
                display('s2618: Made a note of transient weirdness in A24. Look for it'); 
                preproc.task{2}.args.file={fullfile(subDir, 'eeg', 's2618_MSPE_Exp07 (11.5 msec).bdf')};
            case {'s2619'}
                display('s2619: notes say eye-blinks are small, make sure we catch them'); 
                preproc.task{2}.args.file={fullfile(subDir, 'eeg', 's2619_MSPE_Exp07 (4.5 msec).bdf')};
            case {'s2622'}
                display('s2622: Has Small Eye Blinks. Have you inspected these for s2622?'); 
                preproc.task{2}.args.file={fullfile(subDir, 'eeg', 's2622_MSPE_Exp07 (2.75 msec).bdf')};
            case {'s2624'}
                preproc.task{2}.args.file={fullfile(subDir, 'eeg', 's2624_MSPE_Exp07 (4.5 msec).bdf') fullfile(subDir, 'eeg', 's2624_MSPE_Exp07 (4.5 msec)(B).bdf') fullfile(subDir, 'eeg', 's2624_MSPE_Exp07 (4.5 msec)(C).bdf')};
                preproc=INSERT_TASK(preproc, MERGE, 3);
                display('s2624: Did you interpolate Channel B31 for s2624? Not an issue with 40 Hz lowpass, but might be an issue for Spectrotemporal jobs with no lowpass.');
            case {'s2625'}
                display('s2625: Have you looked for transient activity on CP3, C3, and potentially others? Suggest a lower threshold since activity is transient, otherwise we would probably interpolate.  These are generally outside the epoch window for ERP jobs, but might matter for spectrotemporal jobs. Regardless, they are infrequent. '); 
                preproc.task{2}.args.file={fullfile(subDir, 'eeg', 's2625_MSPE_Exp07 (1.0 msec).bdf')};
            case {'s2627'}
                preproc.task{2}.args.file={fullfile(subDir, 'eeg', 's2627_MSPE_Exp07 (2.0 msec)(B).bdf')};
            case {'s2628'}
                preproc.task{2}.args.file={fullfile(subDir, 'eeg', 's2628_MSPE_Exp07 (6.0 msec).bdf')};
                display('s2628: Have you switched A26/A28?'); 
            case {'s2630'}
                display('s2630: Enormous alpha. What to do about this?'); 
                preproc.task{2}.args.file={fullfile(subDir, 'eeg', 's2630_MSPE_Exp07 (3.5 msec).bdf')};
            case {'s2632'}
                preproc.task{2}.args.file={fullfile(subDir, 'eeg', 's2632_MSPE_Exp07 (2.0 msec).bdf')};
            case {'s2633'}
                display('s2633: Noticed considerable motion artifacts in data. Not sure what to do about it.');
                preproc.task{2}.args.file={fullfile(subDir, 'eeg', 's2633_MSPE_Exp07 (4.5 msec).bdf')};
            case {'s2641'}
                preproc.task{2}.args.file={fullfile(subDir, 'eeg', 's2641_MSPE_Exp07 (5.5 msec).bdf') fullfile(subDir, 'eeg', 's2641_MSPE_Exp07 (5.5 msec) B.bdf')};   
                preproc=INSERT_TASK(preproc, MERGE, 3);
            case {'s2643'}
                display('s2643: Have you checked A30 for high frequency noise for s2643?  Probably dont need to worry about it for ERP jobs, but could pose an issue for spect. Should probably just avoid using the channel in SPECT analyses. '); 
%                 display('Have you included both 4.0 msec files for this subject?'); 
                preproc.task{2}.args.file={fullfile(subDir, 'eeg', 's2643_MSPE_Exp07 (4.0 msec).bdf') fullfile(subDir, 'eeg', 's2643_MSPE_Exp07 (4.0 msec)B.bdf')};   
                preproc=INSERT_TASK(preproc, MERGE, 3);
            case {'s2646'}
                display('s2646: B31 has high frequency noise for s2646. Looked at this and it didnt seem to make diff in ERP jobs, but might for spectrotemporal jobs'); 
                preproc.task{2}.args.file={fullfile(subDir, 'eeg', 's2646_MSPE_Exp07 (8.0 msec).bdf')};
            case {'s2647'}
                display('s2647: Have you checked B23 for s2647?');
                preproc.task{2}.args.file={fullfile(subDir, 'eeg', 's2647_MSPE_Exp07 (6.5 msec).bdf') fullfile(subDir, 'eeg', 's2647_MSPE_Exp07 (6.5 msec)B.bdf')};   
                preproc=INSERT_TASK(preproc, MERGE, 3);
            case {'s2649'}
                display('s2649: Have you inspected s2649 eye-blinks? They are very small Yeah, 30 uV cutoff does a great job catching these. '); 
                preproc.task{2}.args.file={fullfile(subDir, 'eeg', 's2649_MSPE_Exp07 (4.0 msec).bdf')};
            case {'s2650'}
                display('s2650: Inspect and interpolate TP7? So, it is noisier than surrounding electrodes but it is not necessarily "bad". It just looks noisier. I would rather not interpolate it.');
                preproc.task{2}.args.file={fullfile(subDir, 'eeg', 's2650_MSPE_Exp07 (3.0 msec L).bdf')};
            case {'s2651'}
                preproc.task{2}.args.file={fullfile(subDir, 'eeg', 's2651_MSPE_Exp07 (8.5 msec).bdf')};
            case {'s2652'}
                display('s2652: B23 and B25 are toast. Need to interpolate. Yes, these need to be interpolated.'); 
                INTERPTASK.args.badchans=[55 57]; INTERPTASK.args.method='spherical';
                erpNEB=INSERT_TASK(erpNEB, INTERPTASK, 3);
                erpNEB_REB=INSERT_TASK(erpNEB_REB, INTERPTASK, 3);
                erpCLEAN=INSERT_TASK(erpCLEAN, INTERPTASK, 3);
                erpCLEAN_REB=INSERT_TASK(erpCLEAN_REB, INTERPTASK, 3);  
                spectERP_CLEAN_REB=INSERT_TASK(spectERP_CLEAN_REB, INTERPTASK, 3); 
                preproc.task{2}.args.file={fullfile(subDir, 'eeg', 's2652_MSPE_Exp07 (6.5 msec).bdf')};
        end %switch
    end % Expo07
    
    
    %% Hi-jacked this code for our source localization stuff to run ICA and
    %% preprocessing on data.
    if strcmpi(EXPID,'SOURCE')==1
        
        % Load 128 data for preprocessing
        preproc.task{2}.args.ref=1:128;
        preproc.task{2}.args.chans=1:128;
        preproc.task{3}.args.file='/home/millerlab/elpfiles/BioSemi_128.elp';
        
        % Filter all 128 channels
        preproc.task{5}.args.channels=1:128;
        
        % Slightly different BIN LIST file
        erpRAW.task{3}.args.BINOPS='';
        erpRAW.task{3}.args.BINLIST='/home/cwbishop/projects/MSPE/code/BIN_SOURCE.txt';
        erpRAW.task{3}.args.chanArray=1:128;
        erpRAW.task{3}.args.Baseline=[-100 0];
        erpRAW.task{3}.args.Epoch=[-800 800];
        erpRAW.task{3}.args.ERPFilename=fullfile(studyDir, SID, 'analysis', [SID '_ERP (ICA) (' num2str(erpRAW.task{3}.args.FilterBandPass(1)) '-' num2str(erpRAW.task{3}.args.FilterBandPass(2)) ' Hz).mat']);
        
        %% try different filter
        erpNEB.task{3}.args.FilterBandPass=[0.5 20]; 
        erpNEB.task{3}.args.BINOPS='';
        erpNEB.task{3}.args.BINLIST='/home/cwbishop/projects/MSPE/code/BIN_SOURCE.txt';
        
        erpNEB.task{3}.args.chanArray=1:128;
        erpNEB.task{3}.args.Baseline=[-100 0];
        erpNEB.task{3}.args.Epoch=[-800 800];
        erpNEB.task{3}.args.ERPFilename=fullfile(studyDir, SID, 'analysis', [SID '_ERP (ICA)-NEB (' num2str(erpNEB.task{3}.args.FilterBandPass(1)) '-' num2str(erpNEB.task{3}.args.FilterBandPass(2)) ' Hz).mat']);
        
        
        switch SID
            case {'DY'}
               preproc.task{2}.args.file={fullfile(subDir, 'eeg', '110415dy(2).bdf')}; 
        end % switch
    end % if SOURCE
    
    if strcmpi(EXPID,'Pilot05')==1        
        switch SID
            case {'s2602'}
                preproc.task{2}.args.file={fullfile(subDir, 'eeg', 's2602_MSPE_Pilot04 (2.7 msec + PUPIL).bdf')};   
                preproc.task{5}.args.boundary=254; % when I manually removed data and merged the files, the boundary event codes changed.
                erp.task{3}.args.boundary=254;
            case {'s2603'}
                preproc.task{2}.args.file={fullfile(subDir, 'eeg', 's2603_MSPE_Pilot04(PupilReflex).bdf')  fullfile(subDir, 'eeg', 's2603_MSPE_Pilot04 (2.0 msec).bdf') fullfile(subDir, 'eeg', 's2603_MSPE_Pilot04(PupilReflex02).bdf')};  
                preproc=INSERT_TASK(preproc, MERGE, 3);
            case {'s2605'}
                preproc.task{2}.args.file={fullfile(subDir, 'eeg', 's2605_MSPE_Pilot04(PupilReflex).bdf') fullfile(subDir, 'eeg', 's2605_MSPE_Pilot04 (12 msec).bdf') };
                preproc=INSERT_TASK(preproc, MERGE, 3);
            case {'s2607'}
                preproc.task{2}.args.file={fullfile(subDir, 'eeg', 's2607_MSPE_Pilot04 (8.5 msec).bdf')};
            case {'s2608'}
                preproc.task{2}.args.file={fullfile(subDir, 'eeg', 's2608_MSPE_Pilot04 (2.0 msec).bdf')};
            case {'s2609'}
                preproc.task{2}.args.file={fullfile(subDir, 'eeg', 's2609_MSPE_Pilot04 (12.0 msec).bdf')};
            case {'s2611'}
                preproc.task{2}.args.file={fullfile(subDir, 'eeg', 's2611_MSPE_Pilot04 (7.5 msec).bdf')};              
        end % switch
    elseif strcmpi(EXPID,'Experiment06')==1
        preproc.task{2}.args.file={fullfile(subDir, 'eeg', [SID '_SPLCheck.bdf'])};
        switch SID
            case {'CB'}
            case {'SL'}
            case {'s2612'}
        end % switch
    end % if 
    
%     % PUT JOBS TOGETHER
%     jobs{end+1}=unpack;
    jobs{end+1}=preproc;        
%     jobs{end+1}=ICA;
%     jobs{end+1}=erpEB; 
%     jobs{end+1}=erpNEB;
%     jobs{end+1}=erpNEB_REB;
%     jobs{end+1}=erpCLEAN;
%      jobs{end+1}=erpCLEAN_REB; 
%     jobs{end+1}=spectERP_CLEAN_REB;
%     jobs{end+1}=TIME_FREQUENCY; 
%     jobs{end+1}=SPECT; 
%     jobs{end+1}=SPECT2;
%     jobs{end+1}=INDUCED; 
end % s

%% GROUP ERP JOBS
GSID='GROUP';
GroupDir=fullfile(studyDir, GSID);


%% GROUP EYE-BLINK JOB
parent={};
for s=1:size(sid,1)
    SID=deblank(sid(s,:)); 
    subDir=fullfile(studyDir, SID); 
    parent{s}=fullfile(subDir, 'jobs', 'erpEB.mat'); 
end % s
    
groupERPEB=gab_emptyjob;
groupERPEB.jobName='groupERP (Eye-Blink)';
groupERPEB.jobDir=fullfile(GroupDir, 'jobs');
groupERPEB.parent=parent; 
clear parent; 
    % Load environmental variables
    groupERPEB.task{end+1}=struct(...
        'func',@gab_task_envvars,...
        'args','');
    groupERPEB.task{end+1}=struct(...
        'func',@MSPE_GROUP_ERP, ...
        'args',struct( ...
            'sid', sid, ...
            'studyDir', studyDir, ...
            'iswavg', 0, ...
            'ERPName', ['Eye-Blink (N=' num2str(size(sid,1)) ')'], ...
            'ERPext', '_ERP (Eye-Blink)'));
    groupERPEB.task{end}.args.outDir=fullfile(studyDir, GSID, 'analysis', [GSID groupERPEB.task{end}.args.ERPext '(N=' num2str(size(sid,1)) ')']);
    

%% GROUP NO-EYE-BLINK DATA
parent={};
for s=1:size(sid,1)
    SID=deblank(sid(s,:)); 
    subDir=fullfile(studyDir, SID); 
    parent{s}=fullfile(subDir, 'jobs', 'erpNEB.mat'); 
end % s

groupERPNEB=gab_emptyjob;
groupERPNEB.jobName='groupERP (No-Eye-Blink)';
groupERPNEB.jobDir=fullfile(GroupDir, 'jobs');
groupERPNEB.parent=parent; 
clear parent;
    % Load environmental variables
    groupERPNEB.task{end+1}=struct(...
        'func',@gab_task_envvars,...
        'args','');
    groupERPNEB.task{end+1}=struct(...
        'func',@MSPE_GROUP_ERP, ...
        'args',struct( ...
            'sid', sid, ...
            'studyDir', studyDir, ...
            'iswavg', 0, ...
            'ERPName', ['No-Eye-Blink (N=' num2str(size(sid,1)) ')'], ...
            'ERPext', '_ERP (No-Eye-Blink)'));
    groupERPNEB.task{end}.args.outDir=fullfile(studyDir, GSID, 'analysis', [GSID groupERPNEB.task{end}.args.ERPext '(N=' num2str(size(sid,1)) ')']);

%% GROUP NO-EYE-BLINK; REB DATA
parent={};
for s=1:size(sid,1)
    SID=deblank(sid(s,:)); 
    subDir=fullfile(studyDir, SID); 
    parent{s}=fullfile(subDir, 'jobs', 'erpNEB_REB.mat'); 
end % s

groupERPNEB_REB=gab_emptyjob;
groupERPNEB_REB.jobName='groupERP (No-Eye-Blink; REB)';
groupERPNEB_REB.jobDir=fullfile(GroupDir, 'jobs');
groupERPNEB_REB.parent=parent;
clear parent; 
    % Load environmental variables
    groupERPNEB_REB.task{end+1}=struct(...
        'func',@gab_task_envvars,...
        'args','');
    groupERPNEB_REB.task{end+1}=struct(...
        'func',@MSPE_GROUP_ERP, ...
        'args',struct( ...
            'sid', sid, ...
            'studyDir', studyDir, ...
            'iswavg', 0, ...
            'ERPName', ['No-Eye-Blink_REB (L+R; N=' num2str(size(sid,1)) ')'], ...
            'ERPext', '_ERP (No-Eye-Blink; REB)'));
    groupERPNEB_REB.task{end}.args.outDir=fullfile(studyDir, GSID, 'analysis', [GSID groupERPNEB_REB.task{end}.args.ERPext '(L+R; N=' num2str(size(sid,1)) ')']);
    
    % Calculate left vs right leading ERPs. 
    groupERPNEB_REB.task{end+1}=struct(...
        'func',@MSPE_ERP_DIFF, ...
        'args',struct( ...
            'ERPName', ['No-Eye-Blink_REB (L-R; N=' num2str(size(sid,1)) ')'], ...
            'ERPext', '_ERP (No-Eye-Blink; REB)'));
    groupERPNEB_REB.task{end}.args.outDir=fullfile(studyDir, GSID, 'analysis', [GSID groupERPNEB_REB.task{end}.args.ERPext '(L-R; N=' num2str(size(sid,1)) ')']);
    
    %% BREAK DOWN INTO LEADING-SIDE GROUPS
    [L R]=LEADING_SIDE(sid); 
    L=sid(L,:);
    R=sid(R,:);
    
    % Left-Side
    groupERPNEB_REB.task{end+1}=struct(...
        'func',@MSPE_GROUP_ERP, ...
        'args',struct( ...
            'sid', L, ...
            'studyDir', studyDir, ...
            'iswavg', 0, ...
            'ERPName', ['No-Eye-Blink_REB (L; N=' num2str(size(L,1)) ')'], ...
            'ERPext', '_ERP (No-Eye-Blink; REB)'));        
    groupERPNEB_REB.task{end}.args.outDir=fullfile(studyDir, GSID, 'analysis', [GSID groupERPNEB_REB.task{end}.args.ERPext '(L; N=' num2str(size(L,1)) ')']);
    PL=groupERPNEB_REB.task{end}.args.outDir;
    
    % Right-Side
    groupERPNEB_REB.task{end+1}=struct(...
        'func',@MSPE_GROUP_ERP, ...
        'args',struct( ...
            'sid', R, ...
            'studyDir', studyDir, ...
            'iswavg', 0, ...
            'ERPName', ['No-Eye-Blink_REB (R; N=' num2str(size(R,1)) ')'], ...
            'ERPext', '_ERP (No-Eye-Blink; REB)'));
    groupERPNEB_REB.task{end}.args.outDir=fullfile(studyDir, GSID, 'analysis', [GSID groupERPNEB_REB.task{end}.args.ERPext '(R; N=' num2str(size(R,1)) ')']);
    PR=groupERPNEB_REB.task{end}.args.outDir;
    
    % Calculate left vs right leading ERPs. 
    groupERPNEB_REB.task{end+1}=struct(...
        'func',@MSPE_ERP_DIFF, ...
        'args',struct( ...
            'ERP1', PL, ...
            'ERP2', PR, ...
            'ERPName', ['No-Eye-Blink_REB (L-R; N=' num2str(size(sid,1)) ')'], ...
            'ERPext', '_ERP (No-Eye-Blink; REB)'));
    groupERPNEB_REB.task{end}.args.outDir=fullfile(studyDir, GSID, 'analysis', [GSID groupERPNEB_REB.task{end}.args.ERPext '(L-R; N=' num2str(size(sid,1)) ')']);
    
%% GROUP CLEAN; REB
parent={};
for s=1:size(sid,1)
    SID=deblank(sid(s,:)); 
    subDir=fullfile(studyDir, SID); 
    parent{s}=fullfile(subDir, 'jobs', 'erpCLEAN_REB.mat'); 
end % s

groupERPCLEAN_REB=gab_emptyjob;
groupERPCLEAN_REB.jobName='groupERP (CLEAN; REB)';
groupERPCLEAN_REB.jobDir=fullfile(GroupDir, 'jobs');
groupERPCLEAN_REB.parent=parent;
clear parent; 
    % Load environmental variables
    groupERPCLEAN_REB.task{end+1}=struct(...
        'func',@gab_task_envvars,...
        'args','');
    groupERPCLEAN_REB.task{end+1}=struct(...
        'func',@MSPE_GROUP_ERP, ...
        'args',struct( ...
            'sid', sid, ...
            'studyDir', studyDir, ...
            'iswavg', 0, ...
            'ERPName', ['CLEAN_REB (L+R; N=' num2str(size(sid,1)) ')'], ...
            'ERPext', '_ERP (CLEAN; REB)'));
    groupERPCLEAN_REB.task{end}.args.outDir=fullfile(studyDir, GSID, 'analysis', [GSID groupERPCLEAN_REB.task{end}.args.ERPext '(L+R; N=' num2str(size(sid,1)) ')']);
    
    %% BREAK DOWN INTO LEADING-SIDE GROUPS
    [L R]=LEADING_SIDE(sid); 
    L=sid(L,:);
    R=sid(R,:);
    
    % Left-Side
    groupERPCLEAN_REB.task{end+1}=struct(...
        'func',@MSPE_GROUP_ERP, ...
        'args',struct( ...
            'sid', L, ...
            'studyDir', studyDir, ...
            'iswavg', 0, ...
            'ERPName', ['CLEAN_REB (L; N=' num2str(size(L,1)) ')'], ...
            'ERPext', '_ERP (CLEAN; REB)'));        
    groupERPCLEAN_REB.task{end}.args.outDir=fullfile(studyDir, GSID, 'analysis', [GSID groupERPCLEAN_REB.task{end}.args.ERPext '(L; N=' num2str(size(L,1)) ')']);
    PL=groupERPCLEAN_REB.task{end}.args.outDir;
    
    % Right-Side
    groupERPCLEAN_REB.task{end+1}=struct(...
        'func',@MSPE_GROUP_ERP, ...
        'args',struct( ...
            'sid', R, ...
            'studyDir', studyDir, ...
            'iswavg', 0, ...
            'ERPName', ['CLEAN_REB (R; N=' num2str(size(R,1)) ')'], ...
            'ERPext', '_ERP (CLEAN; REB)'));
    groupERPCLEAN_REB.task{end}.args.outDir=fullfile(studyDir, GSID, 'analysis', [GSID groupERPCLEAN_REB.task{end}.args.ERPext '(R; N=' num2str(size(R,1)) ')']);
    PR=groupERPCLEAN_REB.task{end}.args.outDir;
    
    % Calculate left vs right leading ERPs. 
    groupERPCLEAN_REB.task{end+1}=struct(...
        'func',@MSPE_ERP_DIFF, ...
        'args',struct( ...
            'ERP1', PL, ...
            'ERP2', PR, ...
            'ERPName', ['CLEAN_REB (L-R; N=' num2str(size(sid,1)) ')'], ...
            'ERPext', '_ERP (CLEAN; REB)'));
    groupERPCLEAN_REB.task{end}.args.outDir=fullfile(studyDir, GSID, 'analysis', [GSID groupERPCLEAN_REB.task{end}.args.ERPext '(L-R; N=' num2str(size(sid,1)) ')']);
    
%% GROUP AMPLITUDE MEASURES  
for s=1:size(sid,1)
    P{s,1}=[studyDir deblank(sid(s,:)) '/analysis/' deblank(sid(s,:)) '_ERP (CLEAN; REB).mat'];
end % s

groupAMP=gab_emptyjob;
groupAMP.jobName='groupAMP';
groupAMP.jobDir=fullfile(studyDir, GSID, 'jobs');
     % Load environmental variables
    groupAMP.task{end+1}=struct(...
        'func',@gab_task_envvars,...
        'args','');
    groupAMP.task{end+1}=struct(...
        'func', @MSPE_EEG_amplitude, ...
        'args', struct(...
            'filename', {P}, ...
            'latency', [[25 40]; [25 60]; [30 60]; [40 60]; [70 100]; [70 120]; [149 179]; [70 179]; [275 475]; [30 100]; [200 500]; [80 120]; [70 120]; [200 250]; [210 250]; [190 260]; [180 270]; [170 280]; [100 250]; [70 250]; [130 300]; [200 300]; [100 150]; [150 200]; [250 300]; [300 350]; [100 300]; [150 300]; [150 250]; [300 500]; [350 500]; [350 400]; [400 450]; [450 500]], ...
            ...%             'binArray', [11 12 15 16], ...
            'binArray', [20 21 23 24], ... 
            'Baseline', 'none', ... % use default baseline.
            ... 'chanArray', {{[4 38 39 11 47 46 12 48 49] [11 47 46 12 48 49 19 32 56] [12 48 49 19 32 56 20 31 57] [5 4 38 10 11 47 13 12 48] [4 38 39 11 47 46 12 48 49 19 32 56]}}, ... % {{[2:1:10 35 36 39:45] [16:18 21:26 53:55 58:63] [11 12 19 47 48 32 46 49 56]}},...
            'chanArray', {{[2 3 5 6 7] [4 33 37 38 39] [35 36 40 41 42] [9 13 14 15 17] [12 32 47 48 49] [44 50 51 52 54] [21 22 23 25 26] [20 29 30 31 57] [58 59 60 62 63]}}, ... % ACP_LMR
            ...'chanArray', {{[1:27] [34:36 39:46 49:64]}}, ... % LEFT_RIGHT
            ...%             'chanArray', {{[2:1:10] [35 36 39:45] [16:18 21:26] [53:55 58:63]}}, ...
            'txtfile', fullfile(studyDir, GSID, 'analysis', 'groupAMP.txt')));

% jobs{end+1}=groupERPEB;
% jobs{end+1}=groupERPNEB;
% jobs{end+1}=groupERPNEB_REB; 
% jobs{end+1}=groupERPCLEAN;
jobs{end+1}=groupERPCLEAN_REB;
% jobs{end+1}=groupSPECTCLEAN;
% jobs{end+1}=groupAMP; 
end % MSPE_gab_setup

function job=INSERT_TASK(job, task, ind)
%% DESCRIPTION
%
% INPUT:
%
%   job
%   task
%   ind
%
% OUTPUT:
%
%   job
%
% Bishop, Christopher W.
%   UC Davis 
%   Miller Lab 2011 
%   cwbishop@ucdavis.edu

    %% COPY HEADER INFO
    tjob=gab_emptyjob;
    tjob.jobName=job.jobName;
    tjob.jobDir=job.jobDir;
    tjob.parent=job.parent;
    
    %% INSERT TASK
    for i=1:length(job.task)        
        if i==ind
            tjob.task{end+1}=task;
            tjob.task{end+1}=job.task{i};
        else
            tjob.task{end+1}=job.task{i};
        end % if
    end % i   
    
    %% COPY MODIFIED JOB
    job=tjob;
end % INSERT_TASK

function [L R]=LEADING_SIDE(SID)
%% DESCRIPTION:
%
%   Function is designed to return a grouping factor for eaching
%   leading-side.  Recall that in later versions of the experiment (I
%   forget exactly when the change was made) we had to present sounds from
%   one-side to ensure we would have enough trials for each condition and
%   percept.  As a result, the GROUP statistics average over both left- and
%   right-leading stimuli.  We want to be able to compare these groups
%   easily to test for lateralization of neural responses, etc. so we have
%   to be able to break them up into groups based on leading side.
%
% INPUT:
%
%   SID:    character array, each row is a subject ID 
%           (e.g. strvcat('s2611', 's2615');)
%
% OUTPUT:
%
%   L:  integer array, index into rows of SID that are left-leading
%   R:  " " but for right-leading subjects.
% 
% Bishop, Christopher W.
%   UC Davis 
%   Miller Lab 2011 
%   cwbishop@ucdavis.edu

LSIDE=strvcat('s2611', 's2617', 's2618', 's2622', 's2630', 's2632', ...
    's2633', 's2641', 's2646', 's2650', 's2651');
RSIDE=strvcat('s2615', 's2616', 's2619', 's2624', 's2625', 's2627', 's2643', ...
    's2647', 's2649', 's2652');

L=ismember(SID, LSIDE, 'rows'); L=find(L==1); 
R=ismember(SID, RSIDE, 'rows'); R=find(R==1); 
end % LEADING_SIDE