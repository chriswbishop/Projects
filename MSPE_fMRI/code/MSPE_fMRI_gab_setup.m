function jobs = MSPE_fMRI_gab_setup(SID, EXPID)
%% DESCRIPTION:
%
%   Job setup file for GAB processing. This is for MSPE_fMRI...which I
%   currently do not have a unique experiment ID for.  
%   
% INPUT:
%
%   SID:    character matrix, each row is a subject ID (e.g.
%           strvcat('sxxxx', 'syyyy');)
%   EXPID:  string, experiment ID (e.g. EXPID='Exp01C';
%
% OUTPUT:
%
%   jobs
%
% Bishop, Christopher W.
%   UC Davis
%   Miller Lab 2012
%   cwbishop@ucdavis.edu

%% SET STUDY DIRECTORY
studyDir=fullfile('/home/cwbishop/projects/MSPE_fMRI/', EXPID); 

%% SET DEFAULTS
TR=2;

%%BEGIN SUBJET JOBS
jobs={};
for s=1:size(SID,1)
    sid=deblank(SID(s,:));
    subDir=fullfile(studyDir,sid);
    
        %% Change these for subject specific modifications to the general plan.
    if strcmp(EXPID, 'Exp01C')
        
        %% GLM ONSET FUNCTIOn
        FUNC=@MSPE_fMRI_EXP01C_GLM;
        
        Pind=[]; P=[];
        switch sid     
            case {'CB'}
                sid='120109CB';
                Pind=[12 13 15 16];
                unpack.task{2}.args.sessions={9 [5 6 7 8]}; 
        end % switch            
        
        %% APPLY FILE NAMES
        for i=1:length(Pind)
            P=strvcat(P, fullfile(subDir, 'behavior', [sid '-MSPE_fMRI' num2str(Pind(i)) '.log']));            
        end %
        
        %% ADD LOGFILES TO GLMs
        smoothedModel.task{1}.args.P=P; 
        smoothedModelGS.task{1}.args.P=P; 
        unsmoothedModel.task{1}.args.P=P; 
    elseif strcmp(EXPID, 'Exp01D'); 
        
        FUNC=@MSPE_fMRI_Exp01D_GLM;
        
        nscan=237;
        
        Pind=[]; P=[];        
        switch sid
            case{'s3201'}
                Pind=[22 23 24 25]; % log files to use for GLM
                SCANS={16 [10 11 12 15]};
                nscan=209;
%                 unpack.task{2}.args.sessions={16 [10 11 12 15]}; 
            case {'s3208'}
                Pind=[15:19 21];
                SCANS={12 [5 6 7 8 9 11]};
                nscan=209;
%                 unpack.task{2}.args.sessions={12 [5 6 7 8 9 11]};                
            case {'s3210'}
                Pind=[23:29];
                SCANS={21 [14:20]};
                nscan=209;
%                 unpack.task{2}.args.sessions={21 [14:20]};
            case {'s3211'}
                display('s3211 does not have any real data. Remember this, Bishop');
                SCANS={9 [3:7]};
                Pind=[];
                nscan=1;                
            case {'s3213'}
                Pind=[23:28];                
                SCANS={19 [13:18]};
%                 unpack.task{2}.args.sessions={19 [13:18]};
            case {'s3215'}
                Pind=[24:28]; 
                SCANS={17 [12:16]};
%                 unpack.task{2}.args.sessions={17 [12:16]};
            case {'s3219'}
                Pind=[20:25];
                SCANS={18 [12:17]};
            case {'s3221'}
                Pind=15:21;
                SCANS={11 [4:10]};
%                 unpack.task{2}.args.sessions={11 [4:10]};
            case {'s3223'}
                Pind=21:25;
                SCANS={17 [12:16]};
            case {'s3225'}
                Pind=12:18;
                SCANS={12 [5:11]};
            case {'s3226'}
                Pind=29;
                SCANS={20 [19]};
            case {'s3228'}
                Pind=23:29;
                SCANS={20 [13:19]};
            case {'s3231'}
                Pind=20:26;
                SCANS={18 [11:17]};
            case {'s3232'}
                Pind=26:32;
                SCANS={19 [12:18]};
            case {'s3237'}
                Pind=9:15;
                SCANS={10 [3:9]};
            case {'s3240'}
                Pind=20:24;
                SCANS={16 [11:15]};
        end % sid
        
        %% GET EPI DIRECTORIES, UPDATE JOBS
        epid={}; pfilt={};
%         for i=1:length(unpack.task{2}.args.sessions{2}); 
        for i=1:length(SCANS{2})
            epid{i}=fullfile(subDir,'epis',['epi' num2str(i)]);
            pfilt{i}='^a\d.*\.nii';
            sfilt{i}='^wra\d.*\.nii';   
            rfilt{i}=['^split_motion' num2str(i)];
            smfilt{i}=['smoothedModel_Sess' num2str(i) '.mat']; % covariate filter for smoothed model, no concatenation.
            NSCAN(i)=nscan;
        end
        
        % GET LOGFILES
        LOGFILES=[];
        for i=1:length(Pind)
            LOGFILES=strvcat(LOGFILES, fullfile(subDir, 'behavior', [sid '-MSPE_fMRI' num2str(Pind(i)) '.log']));            
        end %

        %% CONTRAST LIST FOR EXP 01D
        CON=struct( ...
            'func', @gab_task_SPM_make_convec, ...
            'args', struct( ...
            ... %                 'SPM', fullfile(smoothedModel.task{2}.args.dir, 'SPM.mat'), ...% SPM File
                'SPM', fullfile(subDir, 'analysis', 'smoothedModel_CAT', 'SPM.mat'), ...
                'stat', 'T', ...
                'NORM', {[ones(6,1); zeros(2,1)]}, ...
                'sessrep', '', ...
                'CON', {{... %% ONLY INCLUDE FIRST BASIS FUNCTION (Exclude time/dispersion deriv)
                        {'A.[L R].-One.bf.1.', 1; ... % +Sound(ALL), exclude crappy responses for A/D
%                         'Ape.[L R].-[One Two].bf.1.', 1; ... % added specifier for One/Two otherwise misses are included.
                        'Ape\([R L]\)-(One|Two)(\*bf.1.)', 1; ...'Ape....(One|Two)(\*bf.1.)', ...
                        'D\([L R]\)-Two.bf.1.', 1}, ...'D.[L R].-Two.bf.1.', 1}, ...'D.[L R].-Two.bf.1.', 1} ...
                        ...
                        {'A\([L R]\)-One.bf.1.', 1}, ... % +A(ALL), exclude crappy responses
                        ...
                        {'Ape\([R L]\)-(One|Two)(\*bf.1.)', 1}, ... % Ape, include Ones and Twos (exclude misses)
                        ...
                        {'D\([L R]\)-Two.bf.1.', 1}, ... % Double, exclude crappy responses
                        ...
                        {'Ape\([R L]\)-One(\*bf.1.)', 1}, ...
                        ...
                        {'Ape\([R L]\)-Two(\*bf.1.)', 1}, ...
                        ...
                        {'Ape\([R L]\)-One(\*bf.1.)', 1; ...
                        'Ape\([R L]\)-Two(\*bf.1.)', -1} ...
                        ...
                        {'Ape\([R L]\)-One(\*bf.1.)', -1; ...
                        'Ape\([R L]\)-Two(\*bf.1.)', 1}}},...        
                        ...
                'NAME', {{'+SOUND(ALL)', ...
                        '+A(ALL)', ...
                        '+Ape(ALL)', ...
                        'D(ALL)', ...
                        'Ape(S,ALL)', ...
                        'Ape(NS,ALL)',...
                        'Ape(S,ALL)>Ape(NS,ALL)', ...
                        'Ape(NS,ALL)>Ape(S,ALL)'}})); % CON structure.                    
        
    end % if  strcmp(EXPID, 'Exp01C'); 

    
    %%%SETUP DEFAULTS%%%
    
    %% Unpack job%%%
    unpack=gab_emptyjob;
    unpack.jobName='unpack';
    unpack.jobDir=fullfile(subDir, 'jobs');
    unpack.task{end+1}=struct(...
        'func',@gab_task_unpack,...
        'args',struct(...
            'source',fullfile(studyDir,'sandbox',[sid '-' EXPID '.tgz']),...
            'destination',{{fullfile(subDir, 'dcm'), fullfile(subDir,'behavior')}},...
            'filter',{{'*.dcm', '*.log'}},...
            'options',{{'--strip-components=1', '', ''}}, ...
            'directories', {{fullfile(subDir, 'analysis') fullfile(subDir, 'jobs')}}));
    %%%Convert from dicom to nifti%%%
    unpack.task{end+1}=struct(...
        'func',@gab_task_fmri_dcm2nii,...
        'args',struct(...
            'base',fullfile(subDir,'dcm'),...
            'sessions',{SCANS}, ...
            'format', 'nii', ...
            'name', {{'mprage', 'epi'}}, ...
            'destination', {{fullfile(subDir, 'anatomy') fullfile(subDir, 'epis')}})); %defaults puts first group as mprage and sec group as epis
        
    %% Preprocessing job%%%
    preproc=gab_emptyjob;
    preproc.jobName='preproc';
    preproc.jobDir=fullfile(subDir, 'jobs');
    preproc.parent={fullfile(unpack.jobDir,[unpack.jobName '.mat'])};
    %%%slice timing correction for the epis%%%%
    preproc.task{end+1}=struct(...
        'func',@gab_task_fmri_slice_timing,...
        'args',struct(...
            ...            'data',{''},...
            'data', {epid}, ...
            'CONCAT', true, ... % concatenate into a single session        
            'TR',TR,...
            'so',[2:2:36 1:2:35], ...
            'refslice', 2, ...
            'filt', {repmat({'^\d.*\.nii'}, length(epid),1)})); 
%     preproc.task{end}.args.data=FILES_FROM_CELL(epid, preproc.task{end}.args.filt);
    
    %%%Realign all the epis to the first one%%%%
    preproc.task{end+1}=struct(...
        'func',@gab_task_fmri_realign,...
        'args',struct(...
            ...'data', {FILES_FROM_CELL(epid, pfilt)}, ...
            'data', {epid}, ...
            'filt', {pfilt}, ...
            'CONCAT', true));
        
    %%%Coregister mprage to template%%%
    preproc.task{end+1}=struct(...
        'func',@gab_task_fmri_coreg,...
        'args',struct(...
            'ref','/home/cwbishop/matlab/spm8/canonical/avg152T1.nii',...
            'source', fullfile(subDir,'anatomy','mprage.nii')));
    %%%Coregister an epi to the mprage then use that to coreg the rest%%%
    preproc.task{end+1}=struct(...
        'func',@gab_task_fmri_coreg,...
        'args',struct(...
            'ref',fullfile(subDir,'anatomy','mprage.nii'),...
            'source',fullfile(subDir,'epis','epi1','ra001.nii'),...
            'other',{epid}));
    %% Estimate normalization matrix with MPRAGE
    preproc.task{end+1}=struct(...
        'func',@gab_task_fmri_norm_est,...
        'args',struct(...
            'template','/home/cwbishop/matlab/spm8/canonical/avg152T1.nii',...
            'source', fullfile(subDir,'anatomy','mprage.nii')));
    %% WRITE NORMALIZED EPIs
    preproc.task{end+1}=struct(...
        'func',@gab_task_fmri_norm_write,...
        'args',struct(...
            'matname',fullfile(subDir,'anatomy','mprage_sn.mat'),...
            'resample',{epid}, ...
            ... 'bb',[-86 -110 -66; 86 86 100],...
            'vox',[3.4 3.4 3.4]));
        
    %% WRITE HIGH RESOLUTION MPRAGE
    preproc.task{end+1}=struct(...
        'func',@gab_task_fmri_norm_write,...
        'args',struct(...
            'matname',fullfile(subDir,'anatomy','mprage_sn.mat'),...
            'resample',{{fullfile(subDir,'anatomy','mprage.nii')}},...
            ... 'bb',[-86 -110 -66; 86 86 100],...
            'vox',[2 2 2]));
    %% Smooth data    
    preproc.task{end+1}=struct(...
        'func',@gab_task_fmri_smooth,...
        'args',struct(...
            'data',{epid},...
            'fwhm',[8 8 8], ...
            'filt', {sfilt}));
        
    %%%make hi res brain and study thankyour .bmps
%     thankyou=gab_emptyjob;
%     thankyou.jobName='thankyou';
%     thankyou.jobDir=fullfile(subDir, 'jobs');
%     thankyou.parent={fullfile(preproc.jobDir,[preproc.jobName '.mat'])};
%     thankyou.task{end+1}=struct(...
%         'func',@gab_task_fmri_study_thankyou,...
%         'args',struct(...
%             'file',fullfile(subDir,'anatomy','mmprage.nii'),...
%             'bb',[-90 90; -130 100; -90 110],...
%             'vox',[1 1 1]));
                
    %% SMOOTHED MODEL, SESSIONS ESTIMATED INDEPENDENTLY (no concatenation)
    smoothedModel=gab_emptyjob;
    smoothedModel.jobName='smoothedModel';
    smoothedModel.jobDir=fullfile(subDir, 'jobs');
    smoothedModel.parent={fullfile(unpack.jobDir, [unpack.jobName '.mat']), fullfile(preproc.jobDir,[preproc.jobName '.mat'])};  
    
    % Create onset vectors
    smoothedModel.task{end+1}=struct(...
        'func',FUNC,...
        'args',struct(...
            'P', LOGFILES, ...
            'OUT', fullfile(subDir, 'behavior', 'smoothedModel'), ...
            'CONCAT', false, ...
            'NSCAN', NSCAN, ...
            'SESSMEAN', false, ...
            'STRANS', true, ...
            'SMOUT', ''));
    
    % Breakup motion regressors
    %   necessary with independent session estimates.
    smoothedModel.task{end+1}=struct(...
        'func', @gab_task_SPM_split_regressors, ...
        'args', struct( ...
            'P', fullfile(subDir, 'epis', 'epi1', 'rp_a001.txt'), ...
            'OUT', 'split_motion', ...
            'N', length(epid)));
    
    %% DESIGN MODEL
    smoothedModel.task{end+1}=struct(...
        'func',@gab_task_SPM_specify1stlevel,...
        'args',struct(...
            'dir',fullfile(subDir,'analysis','smoothedModel'),...
            'units','scans',...
            'TR',TR,...
            'scans',{epid},...
            'CONCAT', false, ...
            'scanFilt',{repmat({'^swra.*\.nii'},length(epid),1)},...
            'covariates', {repmat( {fullfile(subDir, 'behavior')}, length(epid), 1)}, ...
            ... %             'covariates',{{fullfile(subDir,'behavior', ['smoothedModel_Sess1.mat']) fullfile(subDir,'behavior', ['smoothedModel_Sess2.mat']) fullfile(subDir,'behavior', ['smoothedModel_Sess3.mat']) fullfile(subDir,'behavior', ['smoothedModel_Sess4.mat'])}},...
            'covFilt', {smfilt}, ...
            'nuisance',{repmat({fullfile(subDir, 'epis', 'epi1')}, length(epid), 1)},...
            'nuFilt',{rfilt},... % motion parameters as nuisance
            'bases','hrf',...
            'mask',{''}, ...
            'gnorm', 'none', ...
            'volt', 1));
         
    %% ESTIMATE MODEL
    smoothedModel.task{end+1}=struct(...
        'func', @gab_task_SPM_estimate, ...
        'args', struct(...
            'dir',(smoothedModel.task{end}.args.dir)));
        
    %% ADD IN CONTRASTS
    CON.args.SPM=fullfile(smoothedModel.task{end}.args.dir, 'SPM.mat'); 
    smoothedModel=gab_insert_task(smoothedModel, CON, length(smoothedModel.task)+1);
    
    
    %% SMOOTHED MODEL, SESSIONS CONCATENATED
    smoothedModel_CAT=gab_emptyjob;
    smoothedModel_CAT.jobName='smoothedModel_CAT';
    smoothedModel_CAT.jobDir=fullfile(subDir, 'jobs');
    smoothedModel_CAT.parent={fullfile(unpack.jobDir, [unpack.jobName '.mat']), fullfile(preproc.jobDir,[preproc.jobName '.mat'])};  
    %%%Turn presentation log files into spm covariate .mat %%%
    smoothedModel_CAT.task{end+1}=struct(...
        'func',FUNC,...
        'args',struct(...
            'P', LOGFILES, ...
            'OUT', fullfile(subDir, 'behavior', 'smoothedModel_CAT'), ...
            'CONCAT', true, ...
            'NSCAN', NSCAN, ...
            'SESSMEAN', true, ...
            'STRANS', true, ...
            'SMOUT', fullfile(subDir, 'epis', 'epi1', 'SESSMEANS.txt')));
    
    %% DESIGN MODEL
    smoothedModel_CAT.task{end+1}=struct(...
        'func',@gab_task_SPM_specify1stlevel,...
        'args',struct(...
            'dir',fullfile(subDir,'analysis','smoothedModel_CAT'),...
            'units','scans',...
            'TR',TR,...
            'scans',{epid},...
            'CONCAT', true, ...
            'scanFilt',{repmat({'^swra.*\.nii'},length(epid),1)},...
            'covariates', {fullfile(subDir, 'behavior')}, ...
            ... %             'covariates',{{fullfile(subDir,'behavior', ['smoothedModel_Sess1.mat']) fullfile(subDir,'behavior', ['smoothedModel_Sess2.mat']) fullfile(subDir,'behavior', ['smoothedModel_Sess3.mat']) fullfile(subDir,'behavior', ['smoothedModel_Sess4.mat'])}},...
            'covFilt',{{'^smoothedModel_CAT_Sess1.mat'}},...
            'nuisance',{{fullfile(subDir, 'epis', 'epi1')}},...
            'nuFilt',{{'rp_a001.txt'}},... % motion parameters as nuisance
            'bases','hrf',...
            'mask',{''}, ...
            'gnorm', 'none', ...
            'volt', 1));
        
    %% MODIFY SPM STRUCTURE
    %   1. Append Session Means to design matrix
    %   2. Remove grand mean.
    %   3. Alter SPM.xX.K
    smoothedModel_CAT.task{end+1}=struct(...
        'func', @gab_task_SPM_AddCustomVar, ...
        'args', struct(...
            'dir', smoothedModel_CAT.task{end}.args.dir, ...
            'P', fullfile(subDir, 'epis', 'epi1', 'SESSMEANS.txt')));
    smoothedModel_CAT.task{end+1}=struct(...
        'func', @gab_task_SPM_ModifyFilter, ...
        'args', struct(...
            'dir', smoothedModel_CAT.task{end}.args.dir, ...
            'HParam', 128, ...
            'row', [([0:length(epid)-1]'.*nscan)+1 [1:length(epid)]'.*nscan], ...
            'RT', TR)); % use whatever filter parameters have been set
    smoothedModel_CAT.task{end+1}=struct(...
        'func', @gab_task_SPM_RemoveCovariate, ...
        'args', struct(...
            'dir', smoothedModel_CAT.task{end}.args.dir, ...
            'name', {{'Sn.1. constant'}}));
   
    %% ESTIMATE MODEL
    smoothedModel_CAT.task{end+1}=struct(...
        'func', @gab_task_SPM_estimate, ...
        'args', struct(...
            'dir',(smoothedModel_CAT.task{end}.args.dir)));
        
    %% ADD IN CONTRASTS
    CON.args.SPM=fullfile(smoothedModel_CAT.task{end}.args.dir, 'SPM.mat'); 
    smoothedModel_CAT=gab_insert_task(smoothedModel_CAT, CON, length(smoothedModel_CAT.task)+1);    
   
    %% SMOOTHED MODEL, SESSIONS CONCATENATED, TIME DERIVATIVE
    smoothedModel_CAT_TD=gab_emptyjob;
    smoothedModel_CAT_TD.jobName='smoothedModel_CAT_TD';
    smoothedModel_CAT_TD.jobDir=fullfile(subDir, 'jobs');
    smoothedModel_CAT_TD.parent={fullfile(unpack.jobDir, [unpack.jobName '.mat']), fullfile(preproc.jobDir,[preproc.jobName '.mat'])};  
    %%%Turn presentation log files into spm covariate .mat %%%
    smoothedModel_CAT_TD.task{end+1}=struct(...
        'func',FUNC,...
        'args',struct(...
            'P', LOGFILES, ...
            'OUT', fullfile(subDir, 'behavior', 'smoothedModel_CAT_TD'), ...
            'CONCAT', true, ...
            'NSCAN', NSCAN, ...
            'SESSMEAN', true, ...
            'STRANS', true, ...
            'SMOUT', fullfile(subDir, 'epis', 'epi1', 'SESSMEANS.txt')));
    
    %% DESIGN MODEL
    smoothedModel_CAT_TD.task{end+1}=struct(...
        'func',@gab_task_SPM_specify1stlevel,...
        'args',struct(...
            'dir',fullfile(subDir,'analysis','smoothedModel_CAT_TD'),...
            'units','scans',...
            'TR',TR,...
            'scans',{epid},...
            'CONCAT', true, ...
            'scanFilt',{repmat({'^swra.*\.nii'},length(epid),1)},...
            'covariates', {fullfile(subDir, 'behavior')}, ...
            ... %             'covariates',{{fullfile(subDir,'behavior', ['smoothedModel_Sess1.mat']) fullfile(subDir,'behavior', ['smoothedModel_Sess2.mat']) fullfile(subDir,'behavior', ['smoothedModel_Sess3.mat']) fullfile(subDir,'behavior', ['smoothedModel_Sess4.mat'])}},...
            'covFilt',{{'^smoothedModel_CAT_TD_Sess1.mat'}},...
            'nuisance',{{fullfile(subDir, 'epis', 'epi1')}},...
            'nuFilt',{{'rp_a001.txt'}},... % motion parameters as nuisance
            'bases','hrf+TD',...
            'mask',{''}, ...
            'gnorm', 'none', ...
            'volt', 1));
        
    %% MODIFY SPM STRUCTURE
    %   1. Append Session Means to design matrix
    %   2. Remove grand mean.
    %   3. Alter SPM.xX.K
    smoothedModel_CAT_TD.task{end+1}=struct(...
        'func', @gab_task_SPM_AddCustomVar, ...
        'args', struct(...
            'dir', smoothedModel_CAT_TD.task{end}.args.dir, ...
            'P', fullfile(subDir, 'epis', 'epi1', 'SESSMEANS.txt')));
    smoothedModel_CAT_TD.task{end+1}=struct(...
        'func', @gab_task_SPM_ModifyFilter, ...
        'args', struct(...
            'dir', smoothedModel_CAT_TD.task{end}.args.dir, ...
            'HParam', 128, ...
            'row', [([0:length(epid)-1]'.*nscan)+1 [1:length(epid)]'.*nscan], ...
            'RT', TR)); % use whatever filter parameters have been set
    smoothedModel_CAT_TD.task{end+1}=struct(...
        'func', @gab_task_SPM_RemoveCovariate, ...
        'args', struct(...
            'dir', smoothedModel_CAT_TD.task{end}.args.dir, ...
            'name', {{'Sn.1. constant'}}));
   
    %% ESTIMATE MODEL
    smoothedModel_CAT_TD.task{end+1}=struct(...
        'func', @gab_task_SPM_estimate, ...
        'args', struct(...
            'dir',(smoothedModel_CAT_TD.task{end}.args.dir)));
        
    %% ADD IN CONTRASTS
    CON.args.SPM=fullfile(smoothedModel_CAT_TD.task{end}.args.dir, 'SPM.mat'); 
    smoothedModel_CAT_TD=gab_insert_task(smoothedModel_CAT_TD, CON, length(smoothedModel_CAT_TD.task)+1);    

%% Put the Jobs together
%     jobs{end+1}=unpack;
%     jobs{end+1}=preproc;
%     jobs{end+1}=thankyou;
%     jobs{end+1}=smoothedModel; % smoothed data, no concatenation, volterra modeling
%     jobs{end+1}=smoothedModel_CAT; % smoothed model, concatenated sessions, volterra modeling.
%     jobs{end+1}=smoothedModel_CAT_TD; % smoothed model, concatenated sessions, HRTF+TD
%     jobs{end+1}=smoothedModelCon;
%     jobs{end+1}=smoothedModel_CAT;
%     jobs{end+1}=smoothedModelGS;
%     jobs{end+1}=smoothedModelGSCon;
%     jobs{end+1}=unsmoothedModel;
%     jobs{end+1}=unsmoothedModelCon;
end

%% GROUP JOBS
GSID='GROUP';
GDIR=fullfile(studyDir, GSID); % group analysis directory 

%% T-TESTS FOR ALL CONTRAST IMAGES FROM SMOOTHED MODEL
%   ASSUMES ALL SPM STRUCTURES HAVE THE SAME STRUCTURE, SO BE CAREFUL, MR.
%   BISHOP.
GsmoothedModel_CAT=gab_emptyjob;
GsmoothedModel_CAT.jobName='GsmoothedModel_CAT';
GsmoothedModel_CAT.jobDir=fullfile(GDIR, 'jobs');

%% BUILD DEPENDENCIES
%   Also gather SPM directories
parent={};
for s=1:size(SID,1)
    sid=deblank(SID(s,:));
    parent{s}=fullfile(studyDir, sid, 'jobs', smoothedModel_CAT.jobName);
    SPMDIR{s}=fullfile(studyDir, sid, 'analysis', 'smoothedModel_CAT');
end % s
GsmoothedModel_CAT.parent=parent;

GsmoothedModel_CAT.task{end+1}=struct(...
        'func', @MSPE_fMRI_SPM_group_contrasts, ...
        'args', struct(...
            'SPMDIR', {SPMDIR}, ... % cell array of SPM directories, where 1st level analyses are sitting 
            'OUTDIR', fullfile(GDIR, 'analysis', 'GsmoothedModel_CAT'), ... % where we'd like to stash the group contrasts
            'TDIR', fullfile(studyDir, '..', 'code', 'templates'), ... % name of template directory 
            'TEMPLATE', 'OneSampleT-test.mat')); % name of template file to use

 %% T-TESTS FOR ALL CONTRAST IMAGES FROM SMOOTHED MODEL
%   ASSUMES ALL SPM STRUCTURES HAVE THE SAME STRUCTURE, SO BE CAREFUL, MR.
%   BISHOP.
GsmoothedModel=gab_emptyjob;
GsmoothedModel.jobName='GsmoothedModel';
GsmoothedModel.jobDir=fullfile(GDIR, 'jobs');

%% BUILD DEPENDENCIES
%   Also gather SPM directories
parent={};
SPMDIR={};
for s=1:size(SID,1)
    sid=deblank(SID(s,:));
    parent{s}=fullfile(studyDir, sid, 'jobs', smoothedModel.jobName);
    SPMDIR{s}=fullfile(studyDir, sid, 'analysis', 'smoothedModel');
end % s
GsmoothedModel.parent=parent;

GsmoothedModel.task{end+1}=struct(...
        'func', @MSPE_fMRI_SPM_group_contrasts, ...
        'args', struct(...
            'SPMDIR', {SPMDIR}, ... % cell array of SPM directories, where 1st level analyses are sitting 
            'OUTDIR', fullfile(GDIR, 'analysis', 'GsmoothedModel'), ... % where we'd like to stash the group contrasts
            'TDIR', fullfile(studyDir, '..', 'code', 'templates'), ... % name of template directory 
            'TEMPLATE', 'OneSampleT-test.mat')); % name of template file to use   
        
%% T-TESTS FOR ALL CONTRAST IMAGES FROM SMOOTHED MODEL
%   ASSUMES ALL SPM STRUCTURES HAVE THE SAME STRUCTURE, SO BE CAREFUL, MR.
%   BISHOP.
GsmoothedModel_CAT_TD=gab_emptyjob;
GsmoothedModel_CAT_TD.jobName='GsmoothedModel_CAT_TD';
GsmoothedModel_CAT_TD.jobDir=fullfile(GDIR, 'jobs');

%% BUILD DEPENDENCIES
%   Also gather SPM directories
parent={};
SPMDIR={};
for s=1:size(SID,1)
    sid=deblank(SID(s,:));
    parent{s}=fullfile(studyDir, sid, 'jobs', smoothedModel_CAT_TD.jobName);
    SPMDIR{s}=fullfile(studyDir, sid, 'analysis', 'smoothedModel_CAT_TD');
end % s
GsmoothedModel_CAT_TD.parent=parent;

GsmoothedModel_CAT_TD.task{end+1}=struct(...
        'func', @MSPE_fMRI_SPM_group_contrasts, ...
        'args', struct(...
            'SPMDIR', {SPMDIR}, ... % cell array of SPM directories, where 1st level analyses are sitting 
            'OUTDIR', fullfile(GDIR, 'analysis', 'GsmoothedModel_CAT_TD'), ... % where we'd like to stash the group contrasts
            'TDIR', fullfile(studyDir, '..', 'code', 'templates'), ... % name of template directory 
            'TEMPLATE', 'OneSampleT-test.mat')); % name of template file to use 

%% ADD IN GROUP JOBS
jobs{end+1}=GsmoothedModel; 
jobs{end+1}=GsmoothedModel_CAT;
jobs{end+1}=GsmoothedModel_CAT_TD;

end % MSPE_fMRI_gab_setup

function DATA=FILES_FROM_CELL(DATA, FILT)
%% DESCRIPTION:
%
% INPUT:
%
% OUTPUT:
%
% 

if ~exist('FILT', 'var')
    for s=1:length(DATA)
        FILT{s}='\*.nii';
    end % for 
elseif length(FILT)==1 
    
    for s=1:length(DATA)
        if ~iscell(FILT)
            filt{s}=FILT;        
        else
            filt{s}=FILT{1};
        end % if
    end % s
    FILT=filt;   
end % if 

data=[];
for s=1:length(DATA)
    if isdir(DATA{s})
        files=spm_select('list',DATA{s},FILT{s});
        temp={};
        for f=1:size(files,1)
            temp=[temp fullfile(DATA{s},files(f,:))];
        end
        data=[data; strvcat(temp{:})];    
    end % if
end % s

% return variable
DATA={data}; 
end % FILES_FROM_CELL

% %% BEGIN GROUP JOBS
% groupDir=fullfile(studyDir,'group');
% 
% %first group, all good subjects:
% group=allsubs;
% allsubs=gab_emptyjob;
% allsubs.jobName='allsubs';
% allsubs.jobDir=fullfile(groupDir,allsubs.jobName, 'jobs');
% for s=1:length(group);
%     allsubs.parent{end+1}=fullfile(studyDir,group{s},'jobs','smoothedModelCon.mat');
% end
% allsubs.task{end+1}=struct(...
%     'func',@streamfmri_e5_gab_group,...
%     'args',struct('subs',{group},'studyDir',studyDir));
% 
% jobs{end+1}=allsubs;
% 
% 
% 
% function x = insert(x,y,i)
% %simple little function to insert y into x at index i and return the new x.
% %used to insert tasks into a task list
% 
% if i==1;
%     x = [y x];
% elseif i>length(x);
%     x=[x y];
% else
%     x=[x(1:i-1) y x(i:end)];
% end
% 
